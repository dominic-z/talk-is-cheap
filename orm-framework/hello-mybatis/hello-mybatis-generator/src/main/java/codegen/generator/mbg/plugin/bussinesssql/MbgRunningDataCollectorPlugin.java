package codegen.generator.mbg.plugin.bussinesssql;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.TopLevelClass;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * 收集mbg运行时的信息，用于传递给外层使用
 * 帮助freeMarker生成service层，主要service层需要PrimaryKey
 *
 * @author dominiczhu
 * @version 1.0
 * @title FreemarkerHelperPlugin
 * @date 2022/1/14 3:02 下午
 */
public class MbgRunningDataCollectorPlugin extends PluginAdapter {

    private static final Map<String, FullyQualifiedJavaType> tablePrimaryKeyMap = new HashMap<>();

    public static FullyQualifiedJavaType getByTableName(String tableName) {
        return tablePrimaryKeyMap.get(tableName);
    }

    @Override
    public boolean validate(List<String> warnings) {
        return true;
    }

    /**
     * This method is called after the primary key class is generated by the JavaModelGenerator.
     *
     * @param topLevelClass
     * @param introspectedTable
     * @return
     */
    @Override
    public boolean modelPrimaryKeyClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        // table configuration字段指的是写在xml里的配置
        tablePrimaryKeyMap.put(introspectedTable.getFullyQualifiedTableNameAtRuntime(), topLevelClass.getType());


        System.out.println(introspectedTable.getTableConfiguration().getTableName());
        return super.modelPrimaryKeyClassGenerated(topLevelClass, introspectedTable);
    }


    @Override
    public boolean modelBaseRecordClassGenerated(TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        String tableName = introspectedTable.getFullyQualifiedTableNameAtRuntime();
        if (!tablePrimaryKeyMap.containsKey(tableName) && introspectedTable.getPrimaryKeyColumns().size() == 1) {
            final IntrospectedColumn primaryKeyCol = introspectedTable.getPrimaryKeyColumns().get(0);
            tablePrimaryKeyMap.put(tableName, primaryKeyCol.getFullyQualifiedJavaType());
        }

        return super.modelBaseRecordClassGenerated(topLevelClass, introspectedTable);
    }


}
